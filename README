设计思路
采集图片和数据

由nginx反向代理tcp连接;redis以生产者和消费者模式运行;多个异步tcp服务器(tcp_server.py)负责后端处理，将收到的数据利用redis_productor写入redis，redis_consumer负责将redis里面的数据写入mongodb

利用python3.5 curio模块实现异步tcp服务器
利用python3.5 asyncio_redis模块redis异步操作

利用curio设置超时

tornado.gen.with_timeout 设置future超时

采集数据接收到后第一时间文本储存,随后入库,避免数据丢失

数据库利用mysql5.7中可以存储JSON的特性,数据库里面包括的有主键ID字段,DeviceID设备ID字段,Millisecond数据采集时间字段和JSON字段(JSON里面只保存不定数量的数据key和数据value)

由服务器端生成关于终端数据格式的配置文件('%s.conf'%device_id),保存在服务器端,并推送到设备终端,终端按照这个配置文件传输数据------是以文本的形式保存还是以JSON的格式保存在数据库里面,以怎样的形式推送给终端

数据查询相关:数据查询的常用sql select JSON,Millisecond from xx where DeviceID = xx and Millisecond between xx and xx 是否需要根据Device进行分区

数据下载相关:数据量比较小的直接查询下载   数据量比较大的在服务器端生成zip 然后把下载地址发给用户

报警相关:定义报警规则 数据的报警只能是如果数值＞,＝,＜或者在某一个区间报警(低电量报警实际也属于这个部分) 通讯丢失报警 如果在数据保存的时候不解析JSON里面的值怎么实现报警

用户管理与权限相关:用户的权限包括它可以管理哪些台站,manager alerts,数据下载    用户管理

需求整理

1.上传数据
json格式 Method键的值为pushDatas
上传成功 服务器需要回复通知终端数据已经上传成功了

2.请求控制数据
json格式 Method键的值为pullParams
服务器按照一定格式回复控制信息
终端收到控制之后回复paramsUpdated
控制信息更新成功

3.时间同步
json格式 Method键的值为pullTime
服务器回复毫秒值

4.上传图像
json格式 Method键的值为pushImage，另外信息里面还包括要传的图像的字节大小
服务器回复pushImageReady表示服务器准备好接受图片
终端不断的发送512个字节一包的数据，直到发完
服务器回复imageUploaded

5.发送conf文件